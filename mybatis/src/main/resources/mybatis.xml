<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-config.dtd">
<!--配置文件-->
<configuration>
    <!--mybatis 可以使用properties引用外部配置文件的数据-->
    <properties resource="db.properties"></properties>

    <!--
        settings：包含很多的配置信息
        setting：用来设置每一项配置
        name：设置项名称
        value：设置项取值
        mapUnderscoreToCamelCase	是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。
    -->
    <!--设置-->
    <settings>
        <!--开启驼峰命名法规则 数据库的 u_uid 可在实体类中转化为 UUID  -->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
    </settings>

    <!--设置别名-->
    <typeAliases>
        <!--
            typeAlias 为某个java类取别名
            type 指定需要起别名的类型全路径名称  包名.类名  默认别名的类型为类名小写  user
            alias  指定新的别名
        -->
        <typeAlias type="com.yc.entity.User" alias="user"></typeAlias>
        <!--package 为某个包下的所有类批量取别名 name 包名 默认类名小写
           在package前提下  使用@Alias 注解
        -->
        <package name="com.yc.entity"/>
    </typeAliases>

    <!--
        MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中，
        现实情况下有多种理由需要这么做。例如，开发、测试和生产环境需要有不同的配置；或者想在具有相同 Schema
        的多个生产数据库中使用相同的 SQL 映射。还有许多类似的使用场景。
    尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。
        environment: 配置一个具体环境 必须包含一下两个标签
        transactionManager: 事务管理器
        dataSource:  数据源
    JDBC – 这个配置直接使用了 JDBC 的提交和回滚功能，它依赖从数据源获得的连接来管理事务作用域。默认情况下，为了与某些驱动程序兼容，
    它在关闭连接时启用自动提交。
    MANAGED – 这个配置几乎没做什么。它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。
     默认情况下它会关闭连接。然而一些容器并不希望连接被关闭，因此需要将 closeConnection 属性设置为 false 来阻止默认的关闭行为。

     如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器transactionManager，因为 Spring 模块会使用自带的管理器来覆盖前面的配置。

     UNPOOLED– 这个数据源的实现会每次请求时打开和关闭连接。虽然有点慢，但对那些数据库连接可用性要求不高的简单应用程序来说，是一个很好的选择。
      性能表现则依赖于使用的数据库，对某些数据库来说，使用连接池并不重要，这个配置就很适合这种情形。UNPOOLED 类型的数据源仅仅需要配置以下 5 种属性：
    driver – 这是 JDBC 驱动的 Java 类全限定名（并不是 JDBC 驱动中可能包含的数据源类）。
    url – 这是数据库的 JDBC URL 地址。
    username – 登录数据库的用户名。
    password – 登录数据库的密码。
    defaultTransactionIsolationLevel – 默认的连接事务隔离级别。

    POOLED– 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。


    -->

    <environments default="dev_mysql">
        <!--配置数据源信息  环境变量-->
        <environment id="dev_mysql">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${mysql.driver}"/>
                <property name="url" value="${mysql.url}"/>
                <property name="username" value="${mysql.user}"/>
                <property name="password" value="${mysql.password}"/>
            </dataSource>
        </environment>
    </environments>

    <!--  数据库厂商的配置  配置数据库要写在映射文件前面-->
    <databaseIdProvider type="DB_VENDOR">
        <property name="SQL Server" value="sqlserver"/>
        <property name="MySQL" value="mysql"/>
        <property name="Oracle" value="oracle"/>
    </databaseIdProvider>

    <!--    sql 映射文件-->
    <mappers>
        <!--        注册映射文件：resource：引用类路径下的sql映射文件-->
                <mapper resource="com/yc/mapper/UserMapper.xml"/>
        <!--        注册映射接口： class: 引用接口 sql映射文件与接口同名，且放在同一个包下-->
        <!--        <mapper class="com.yc.mapper.UserMapper"></mappers>-->
        <!--        将包内的映射器接口全部注册为映射器 -->
<!--        <package name="com.yc.mapper"></package>-->

    </mappers>

</configuration>